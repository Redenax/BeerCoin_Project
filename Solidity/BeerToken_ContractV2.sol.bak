// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Interfaccia standard del token ERC20
interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event Approval(address indexed owner, address indexed spender, uint256 amount);
}

// Contratto principale
contract BeerToken is IERC20 {
    // Mappa dei saldi degli utenti
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowances;

    // Indirizzo del proprietario del contratto
    address public owner;

    // Nome del token
    string public name;

    // Simbolo del token
    string public symbol;

    // Decimali del token
    uint8 public decimals;

    // QuantitÃ  totale di token in circolazione
    uint256 public totalSupply;

    // Costruttore del contratto
    constructor() payable {
        owner = msg.sender;
        name = "Beer Token";
        symbol = "BEER";
        decimals = 18;
        totalSupply = 100000000 * (10 ** uint256(decimals)); // 100.000.000 BeerToken

        // Trasferisci 100.000.000 BeerToken al contratto
        balances[address(this)] = totalSupply;

        // Trasferisci 1.000 BeerToken al creatore del contratto
        uint256 creatorAllocation = 1000 * (10 ** uint256(decimals));
        balances[msg.sender] = creatorAllocation;

        emit Transfer(address(0), address(this), totalSupply);
        emit Transfer(address(this), msg.sender, creatorAllocation);
        
        // Assicura che il valore inviato durante il deploy sia di almeno 0.5 Ether
        require(msg.value >= 0.5 ether, "Insufficient Ether sent");
    }

    // Funzione per il trasferimento dei token
    function transfer(address to, uint256 amount) external override returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    // Funzione per il trasferimento dei token da un indirizzo all'altro
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(balances[sender] >= amount, "Insufficient balance");

        balances[sender] -= amount;
        balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    // Funzione per l'approvazione di un indirizzo a spender un numero specifico di token dal proprio account
    function approve(address spender, uint256 amount) external override returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    // Funzione per l'uso approvato di token da parte di spender
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowances[sender][msg.sender], "Insufficient allowance");

        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, amount);
        return true;
    }

    // Funzione per ottenere il saldo di un determinato account
    function balanceOf(address account) external view override returns (uint256) {
        return balances[account];
    }

    // Funzione per ottenere l'importo di token che il proprietario ha approvato per spender
    function allowance(address _owner, address _spender) external view override returns (uint256) {
        return allowances[_owner][_spender];
    }
    
    // Funzione per il mint di BeerToken
    function mint() external payable {
        require(msg.sender == owner, "Only owner can mint");
        require(msg.value >= 1 ether, "Insufficient Ether sent");

        uint256 amountToMint = (msg.value / 1 ether) * 100000;

        totalSupply += amountToMint;
        balances[msg.sender] += amountToMint;

        emit Transfer(address(0), msg.sender, amountToMint);
    }
     // Funzione per depositare Ether nel contratto e ricevere BeerToken in cambio
    function depositEther() external payable {
        uint256 amount = msg.value;
        uint256 beerTokens = amount * exchangeRate;
        require(balances[address(this)] >= beerTokens, "Insufficient BeerToken balance in the contract");

        balances[msg.sender] += beerTokens;
        balances[address(this)] -= beerTokens;

        emit Transfer(address(this), msg.sender, beerTokens);
        emit EtherDeposited(msg.sender, amount);
    }

    // Funzione per scambiare Ether per BeerToken
    function exchangeEtherForBeerToken() external payable {
        uint256 amount = msg.value;
        uint256 beerTokens = amount * exchangeRate;
        require(balances[address(this)] >= beerTokens, "Insufficient BeerToken balance in the contract");

        balances[msg.sender] += beerTokens;
        balances[address(this)] -= beerTokens;

        emit Transfer(address(this), msg.sender, beerTokens);
        emit Exchanged(msg.sender, amount, beerTokens);
    }

    // Funzione per permettere al proprietario di modificare il tasso di scambio
    function setExchangeRate(uint256 rate) external {
        require(msg.sender == owner, "Only owner can set exchange rate");
        exchangeRate = rate;
    }

    // Funzione per permettere al proprietario di ritirare Ether dal contratto
    function withdrawEther(uint256 amount) external {
        require(msg.sender == owner, "Only owner can withdraw Ether");
        payable(msg.sender).transfer(amount);
    }
    
    // Bilancio attuale di Ether nel contratto
    function contractEthBalance() public view returns (uint256) {
        return address(this).balance;
    }

    // Bilancio attuale di BeerToken nel contratto
    function contractBeerTokenBalance() public view returns (uint256) {
        return balances[address(this)];
    }
}
 